# Chapter 7: Sparse Kernel Machines 稀疏核机器
# 本章介绍支持向量机和相关向量机

name: "Sparse Kernel Machines"

# 7.1 最大边界分类器
maximum_margin_classifiers:
  # 线性可分SVM
  linear_svm:
    C: 1.0  # 正则化参数
    kernel: "linear"
    
  # 软间隔SVM
  soft_margin_svm:
    C: 1.0  # 控制错分样本的惩罚
    slack_penalty: "l1"  # l1或l2
    
  # 非线性SVM
  nonlinear_svm:
    kernel: "rbf"
    gamma: 0.1
    C: 1.0
    
  # 多类分类
  multiclass:
    strategy: "ovo"  # one-vs-one, one-vs-rest
    
# 支持向量机优化
svm_optimization:
  # 对偶问题
  dual_formulation:
    solver: "quadratic_programming"
    
  # SMO算法
  smo:
    epsilon: 0.001
    tolerance: 0.001
    max_iter: 1000
    
  # 核缓存
  kernel_cache:
    enabled: true
    max_size: 500

# 7.2 相关向量机
relevance_vector_machines:
  # RVM回归
  regression:
    # 先验
    alpha_init: 1.0  # 初始精度参数
    beta_init: 1.0   # 噪声精度
    
    # 优化
    max_iter: 1000
    tolerance: 1e-3
    prune_threshold: 1e10  # 剪枝阈值
    
  # RVM分类
  classification:
    # 使用Laplace近似
    approximation: "laplace"
    max_iter: 1000
    
  # 稀疏性
  sparsity:
    automatic_relevance_determination: true
    
# 核函数设置
kernels:
  linear:
    type: "linear"
    
  polynomial:
    type: "poly"
    degree: 3
    gamma: 1.0
    coef0: 0.0
    
  rbf:
    type: "rbf"
    gamma: 0.5
    
  sigmoid:
    type: "sigmoid"
    gamma: 0.1
    coef0: 0.0

# 数据生成
data_generation:
  # 二分类数据
  binary_classification:
    dataset: "two_moons"  # two_moons, circles, linearly_separable
    n_samples: 200
    noise: 0.1
    
  # 多分类数据
  multiclass_classification:
    dataset: "three_clusters"
    n_samples: 300
    n_classes: 3
    
  # 回归数据
  regression:
    function: "sinc"
    n_samples: 100
    noise_std: 0.1
    x_range: [-10, 10]
    
  # 高维数据
  high_dimensional:
    n_features: 100
    n_informative: 10
    n_samples: 200

# 实验设置
experiments:
  # 核函数比较
  kernel_comparison:
    kernels: ["linear", "poly", "rbf", "sigmoid"]
    
  # C参数影响
  c_parameter_analysis:
    C_values: [0.01, 0.1, 1.0, 10.0, 100.0]
    
  # 稀疏性比较
  sparsity_comparison:
    methods: ["svm", "rvm"]
    
  # 计算复杂度
  complexity_analysis:
    sample_sizes: [100, 500, 1000, 5000]